package form

type CalendarOpts struct{}

css calendarContainer() {
	position: relative;
}

css calendar() {
	position: absolute;
	top: 100%;
	left: 0;
	display: none;
	z-index: 1000;
	background-color: #fff;
	border: 1px solid #ccc;
	box-shadow: 0px 0px 16px 0px rgba(0,0,0,0.2);
	padding: 10px;
	width: 250px;
}

css calendarHeader() {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin-bottom: 10px;
}

css calendarMonth() {
	text-align: center;
	font-size: 18px;
}

css calendarWeekDays() {
	display: flex;
	justify-content: space-around;
	background-color: #f0f0f0;
	padding: 5px;
}

css calendarWeekDaysItem() {
	width: 30px;
	text-align: center;
}

css calendarDays() {
	width: 30px;
	text-align: center;
}

css calendarDaysItem() {
	width: 30px;
	height: 30px;
	text-align: center;
	line-height: 30px;
	cursor: pointer;
	border: 1px solid #ccc;
}

templ Calendar(opts CalendarOpts) {
	<div class={ calendarContainer() } id="calendarContainer">
		<div class="field">
			<label class="Label">Select Date:</label>
			<div class="control">
				<input class="input" type="text" id="datetimeinput" readonly/>
			</div>
		</div>
		<div class={ calendar() } id="calendar">
			<div class={ calendarHeader() }>
				<span class="icon">
					<i id="prevMonth">Previous</i>
				</span>
				<span class="month" id="currentMonthYear"></span>
				<span class="icon">
					<i id="nextMonth">Next</i>
				</span>
			</div>
			<div class={ calendarWeekDays() }>
				<div class={ calendarWeekDaysItem() }>Sun</div>
				<div class={ calendarWeekDaysItem() }>Mon</div>
				<div class={ calendarWeekDaysItem() }>Tue</div>
				<div class={ calendarWeekDaysItem() }>Wed</div>
				<div class={ calendarWeekDaysItem() }>Thu</div>
				<div class={ calendarWeekDaysItem() }>Fri</div>
				<div class={ calendarWeekDaysItem() }>Sat</div>
			</div>
			<div class={ calendarDays() } id="calendarDays">
				<div class={ calendarDaysItem() }>1</div>
			</div>
			<div class="field">
				<label class="label">Select Time:</label>
				<div class="control">
					<input class="input" type="time" id="timePicker"/>
				</div>
			</div>
		</div>
		@calendarScript(calendarDaysItem().ClassName())
	</div>
}

script calendarScript(calendarItemClassName string) {
	document.addEventListener("DOMContentLoaded", () => {
			const dateTimeInput = document.getElementById("datetimeinput");
			const calendarContainer = document.getElementById("calendarContainer");
			const calendar = document.getElementById("calendar");
			const currentMonthYear = document.getElementById("currentMonthYear");
			const prevMonthBtn = document.getElementById("prevMonth");
			const nextMonthBtn = document.getElementById("nextMonth");
			const calendarDays = document.getElementById("calendarDays");
			const timePicker = document.getElementById("timePicker");

			let currentDate = new Date();
			let selectedDate = currentDate;

			function generateCalendar() {
				const year = currentDate.getFullYear();
				const month = currentDate.getMonth();

				currentMonthYear.textContent = new Date(year, month)
					.toLocaleDateString("en-US", {
						month: "long",
						year: "numeric"
					}
				)

				calendarDays.innerHTML = "";

				const firstDayOfMonth = new Date(year, month, 1);
				const startingDaysOfWeek = firstDayOfMonth.getDay();

				for (let i = 0; i < startingDaysOfWeek; i++) { const day = document.createElement("div"); day.classList.add();
					day.classList.add("emptyDay");
					calendarDays.appendChild(day);
					day.classList.add(calendarItemClassName);
				}

				const daysInMonth = new Date(year, month + 1, 0).getDate();

				for (let i = 1; i <= daysInMonth; i++) {
					const day = document.createElement("div");
					day.classList.add(calendarItemClassName);
					day.textContent = i;
					day.addEventListener("click", () => {
						selectedDate = new Date(year, month, i);
						const formatted = selectedDate.toLocaleDateString("en-US");
						const time = timePicker.value;
						dateTimeInput.value = `${formatted} ${time}`;
					});
					calendarDays.appendChild(day);
				}
			}

			dateTimeInput.addEventListener("click", () => {
				calendar.style.display = "block";
				generateCalendar();
			});

			prevMonthBtn.addEventListener("click", () => {
				currentDate.setMonth(currentDate.getMonth() - 1);
				generateCalendar();
			});

			nextMonthBtn.addEventListener("click", () => {
				currentDate.setMonth(currentDate.getMonth() + 1);
				generateCalendar();
			});

			generateCalendar();
		});
}
