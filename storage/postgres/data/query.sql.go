// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getByEmail = `-- name: GetByEmail :one
SELECT id, name, email, password, image FROM users
WHERE email = $1
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Image,
	)
	return i, err
}

const getByID = `-- name: GetByID :one
SELECT id, name, email, password, image FROM users
WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Image,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users(id, name, email, password)
VALUES ($1, $2, $3, $4)
`

type InsertUserParams struct {
	ID       pgtype.UUID
	Name     string
	Email    string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2, email = $3, password = $4, image = $5
WHERE id = $1
`

type UpdateUserParams struct {
	ID       pgtype.UUID
	Name     string
	Email    string
	Password string
	Image    pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Image,
	)
	return err
}
